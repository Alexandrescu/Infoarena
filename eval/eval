#! /usr/bin/env php
<?php

require_once(dirname($argv[0]) . "/config.php");

require_once(IA_ROOT_DIR.'common/log.php');
require_once(IA_ROOT_DIR.'common/common.php');

require_once(IA_ROOT_DIR.'common/score.php');
require_once(IA_ROOT_DIR.'common/task.php');
require_once(IA_ROOT_DIR.'common/round.php');
require_once(IA_ROOT_DIR.'common/security.php');
require_once(IA_ROOT_DIR.'common/db/task.php');
require_once(IA_ROOT_DIR.'common/db/job.php');
require_once(IA_ROOT_DIR.'common/db/user.php');

require_once(IA_ROOT_DIR.'eval/utilities.php');
require_once(IA_ROOT_DIR.'eval/download.php');
require_once(IA_ROOT_DIR.'eval/classic_grader.php');

error_reporting(0xFFFF);

// Send job result.
function job_send_result($jobid, $jobresult) {
    log_print("Sending result for job #{$jobid} ".
            "score {$jobresult['score']} message {$jobresult['message']}");
    log_print("");
    job_update($jobid, 'done', $jobresult['message'], $jobresult['log'], $jobresult['score']);
}

// This function handles a certain job.
function job_handle($job) {
    // Evaluating, mark as processing.
    // FIXME: do it in query.
    job_update($job['id'], 'processing');

    // Get task
    $task = task_get($job['task_id']);
    log_assert(!is_null($task), "Nu am gasit task-ul " . $job['task_id']);

    // Get task parameters.
    $task_parameters = task_get_parameters($job['task_id']);
    log_assert(!is_null($task_parameters),
            "Nu am putut paramtetrii task-ul " . $job['task_id']);

    // Make the grader and execute it.
    log_print("Job #{$job['id']} task {$task['id']} round {$job['round_id']} type {$task['type']}");
    if ($task['type'] == 'classic') {
        $job_result = classic_task_grade_job($task, $task_parameters, $job);
    } else {
        log_error("Nu stiu sa evaluez task-uri de tip ".$task['type']);
    }

    // Send job result and update score magic.
    job_send_result($job['id'], $job_result);
    score_update_for_job(
            $job_result['score'],
            $job['submit_time'],
            $job['user_id'],
            $job['task_id'],
            $job['round_id']);
}

// Main loop. It works by polling the sql server
// every IA_judge_POLL_INTERVAL
function judge_main_loop() {
    db_connect();

    log_print("");
    log_print("Judge started");
    log_print("");

    while (1) {
        if ($round = round_get_round_to_wait()) {
            round_event_wait($round);
            continue;
        }
        if ($round = round_get_round_to_start()) {
            round_event_start($round);
            continue;
        }
        if ($round = round_get_round_to_stop()) {
            round_event_stop($round);
            continue;
        }
        if ($job = job_get_next_job()) {
            job_handle($job);
            continue;
        }
        milisleep(IA_JUDGE_POLL_INTERVAL);
    }
}

// Parse options. FIXME: php's built-in getopt is dumb
$options = getopt("dl:");

if (array_key_exists('d', $options)) {
    // Run in daemon mode. Fork to background, pid to eval.pid
    if ($pid = pcntl_fork()) {
        die();
    }
    file_put_contents(IA_ROOT_DIR . 'eval/eval.pid', getmypid() . "\n");
}

// FIXME: Is there a better way to redirect output? No freopen in php.
if (array_key_exists('l', $options)) {
    ini_set('error_log', $options['l']);
}

judge_main_loop();

?>

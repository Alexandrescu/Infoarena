#! /usr/bin/env php
<?php

// dependencies
require_once(dirname($argv[0]) . "/utilities.php");
require_once(IA_ROOT_DIR."common/db/user.php");
require_once(IA_ROOT_DIR."common/db/textblock.php");
require_once(IA_ROOT_DIR."common/user.php");
require_once(IA_ROOT_DIR."common/rating.php");
require_once(IA_ROOT_DIR."common/email.php");
require_once(IA_ROOT_DIR."www/url.php");
db_connect();

// config
define("IA_NEWSLETTER_FROM", "Cristian George Strat <cristian@infoarena.ro>");
// define("IA_NEWSLETTER_FROM", "Crestez Dan Leonard <cdleonard@gmail.com>");
// how many emails to send at once (with no delay)
define("IA_BURST_LENGTH", 25);
// pause (milliseconds i.e. 10^-3) between bursts.
define("IA_BURST_DELAY", 500);

// place where we store newsletter logs
define("IA_NEWSLETTER_LOGDIR", IA_ROOT_DIR."scripts/newsletter-logs/");

// return array with valid subscriber list identifiers
function list_valid_ids() {
    $valid = array(
        'all', 'admins', 'rated', 'test'
    );
    return $valid;
}

function list_get($list_id) {
    switch ($list_id) {
        case 'all':
            // all subscribers that agree to receive newsletters
            $query = "SELECT * FROM ia_user WHERE newsletter = 1
                      ORDER BY full_name";
            return db_fetch_all($query);

        case 'admins':
            // all administrators
            $query = "SELECT * FROM ia_user
                      WHERE 'admin' = security_level AND newsletter = 1
                      ORDER BY full_name";
            return db_fetch_all($query);

        case 'rated':
            // all rated users that agree to receive newsletters
            $query = "SELECT * FROM ia_user
                      WHERE 0 < rating_cache AND newsletter = 1
                      ORDER BY rating_cache DESC";
            return db_fetch_all($query);

        case 'test':
            // a small set of users. meant for testing
            $usernames = array('wickedman', 'fluffy');
            $query = "SELECT * FROM ia_user
                      WHERE username IN ('".join("', '", $usernames)."')
                      ORDER BY full_name";
            return db_fetch_all($query);

        default:
            log_error("Invalid list id!");
    }
}

// Preview email for a given recipient
// When recipient is null, no tags are replaced
function preview_email($textblock, $recipient = null, $short = false) {
    log_assert(is_null($recipient) || valid_recipient($recipient));

    if ($recipient) {
        $subject = email_tags($textblock['title'], $recipient);
        $body = email_tags($textblock['text'], $recipient);
    }
    else {
        $subject = $textblock['title'];
        $body = $textblock['text'];
    }

    echo "\n\n===  e-mail ========================================\n";
    echo "From   : ".IA_NEWSLETTER_FROM."\n";
    if ($recipient) {
        echo "To     : ".$recipient['email']."\n";
    }
    else {
        echo "To     : %email%\n";
    }
    echo "Subject: {$subject}\n";
    if (!$short) {
        echo "---  body ------------------------------------------\n";
        echo wordwrap($body, IA_EMAIL_WORDRAP)."\n";
        echo "--- /body ------------------------------------------\n";
    }
    echo "=== /e-mail ========================================\n\n";

    // warn users if word-wrapping is needed
    if (wordwrap($body, IA_EMAIL_WORDRAP) != $body) {
        log_print("WARNING: Please word-wrap the text to ".IA_EMAIL_WORDRAP
                  ." characters per line!\n");
    }
}

// Replace special email tags (placeholders) with real content
function email_tags($content, $recipient) {
    log_assert(valid_recipient($recipient));

    global $_et_callback_hack;
    $_et_callback_hack = $recipient;

    $content = preg_replace_callback('/%([a-z_0-9]+)%/', 'email_tags_callback',
                                     $content);

    return $content;
}

// Callback for email_tags
function email_tags_callback($matches) {
    global $_et_callback_hack;
    log_assert(valid_recipient($_et_callback_hack));
    log_assert(2 == count($matches));

    $recipient = $_et_callback_hack;
    $tag = $matches[1];

    switch ($tag) {
        case 'rating':
            if ($recipient['rating_cache']) {
                return rating_scale($recipient['rating_cache']);
            }
            else {
                return 'fara rating';
            }
        case 'full_name':
            return $recipient['full_name'];
        case 'username':
            return $recipient['username'];
        case 'email':
            return $recipient['email'];
        case 'url_profile':
            return url_user_profile($recipient['username'], true);
        case 'url_infoarena':
            return IA_URL;
        case 'url_forum':
            return IA_SMF_URL;
        case 'url_unsubscribe':
            // unsubscribe link
            $key = user_unsubscribe_key($recipient);
            return url_absolute(url_unsubscribe($recipient['username'], $key));
        case 'your_rating_is':
            // nice sentence telling user what her rating is.
            // when user is not rated, expand tag to nothing
            if ((int)$recipient['rating_cache']) {
                return 'Rating-ul tau este '
                       .rating_scale($recipient['rating_cache'])." (din 1000)"
                       .".\n";
            }
            else {
                return '';
            }
        default:
            log_error("Invalid email tag: ".$tag);
    }
}


// Make sure $recipient is a valid... recipient :)
// Keep these checks very light. Performance bottleneck ahead.
function valid_recipient($recipient) {
    $valid = !is_null($recipient) && isset($recipient['username']);
    if (!$valid) {
        log_print("Invalid recipient: ".print_r($recipient, true));
    }
    return $valid;
}

// Format recipient to display it nicely on screen / log
function recipient_str($recipient) {
    log_assert(valid_recipient($recipient));
    return '<'.$recipient['email'].'> ['.$recipient['username']
            .'] '.$recipient['full_name'];
}

// each newsletter has its own log
// put $msg into $page_name's log
function nlog($newsletter_id, $msg) {
    $fd = fopen(IA_NEWSLETTER_LOGDIR.$newsletter_id, "a");
    log_assert($fd);
    fputs($fd, $msg."\n");
    fclose($fd);
}

// Tells whether a newsletter log exists
function nlog_exists($newsletter_id) {
    $fname = IA_NEWSLETTER_LOGDIR.$newsletter_id;
    return file_exists($fname);
}

// Display newsletter log
function nlog_view($newsletter_id) {
    $fname = IA_NEWSLETTER_LOGDIR.$newsletter_id;
    log_assert(file_exists($fname));
    $buffer = file_get_contents($fname);
    echo $buffer;
}

function log_putch($char) {
    log_assert(1 == strlen($char));
    static $lcount = 0;

    $lcount++;
    echo $char;
    if (0 == $lcount % 79) {
        echo "\n";
    }
}

/// entry point
// ---------------------------------------------------------------------

// read page name
if (2 != $argc) {
    log_error("usage: ./send-newsletter wiki-page-name");
}
$page_name = $argv[1];

// validate $page_name
$prefix = 'newsletter/';
if ($prefix != substr($page_name, 0, strlen($prefix))) {
    log_error("Newsletter page names should start with $prefix");
}
$textblock = textblock_get_revision($page_name);
if (!$textblock) {
    log_error("Invalid page name!");
}
$newsletter_id = substr($page_name, strlen($prefix));

// small preview before entering main menu
preview_email($textblock, null, true);

// check log
// It is possible that script was interrupted so warn user to resume
if (nlog_exists($newsletter_id)) {
    log_print("WARNING: This newsletter already has a log! It is "
              ."possible that a prior mass mail process failed.\n");
    if (read_bool("Would you like to inspect the log?", true)) {
        nlog_view($newsletter_id);
    }
}

// main menu
while (true) {
    $cmd = read_line("newsletter>");
    $elems = split(" ", $cmd);
    if (1 < count($elems)) {
        $cmd = $elems[0];
        array_shift($elems);
        $param = join(" ", $elems);
    }
    else {
        $param = null;
    }

    switch ($cmd) {
        case "quit":
            // guess what?
            log_print("Bye!");
            die();
            break;

        case "preview":
            // preview email as it would be received by a user
            if ($param) {
                $user = user_get_by_username($param);
                if (!$user) {
                    log_print("No such user!");
                    break;
                }
            }
            else {
                $user = null;
            }
            preview_email($textblock, $user);
            break;

        case "count":
            // count subscribers in a given list
            if (!$param) {
                log_print('Forgot to specify subscriber list');
                break;
            }
            if (!in_array($param, list_valid_ids())) {
                log_print("No such list!");
            }
            $list = list_get($param);
            log_print(count($list)." subscribers in this list\n");
            if (!$param) {
                log_print('Forgot to specify subscriber list');
                break;
            }
            if (!in_array($param, list_valid_ids())) {
                log_print("No such list!");
            }
            $list = list_get($param);
            $i = 0;
            foreach ($list as $recipient) {
                if (!is_valid_email($recipient['email'])) {
                    $status = 'INVALID';
                }
                else {
                    $status = 'ok     ';
                }
                log_print($i."\t".$status."\t".recipient_str($recipient));
                $i++;
            }
            log_print("\n".count($list)." subscribers in this list\n");
            break;

        case "list":
            // list subscribers in a given list
            if (!$param) {
                log_print('Forgot to specify subscriber list');
                break;
            }
            if (!in_array($param, list_valid_ids())) {
                log_print("No such list!");
            }
            $list = list_get($param);
            $i = 0;
            foreach ($list as $recipient) {
                if (!is_valid_email($recipient['email'])) {
                    $status = 'INVALID';
                }
                else {
                    $status = 'ok     ';
                }
                log_print($i."\t".$status."\t".recipient_str($recipient));
                $i++;
            }
            log_print("\n".count($list)." subscribers in this list\n");
            break;

        case "log":
            // view newsletter log
            if (nlog_exists($newsletter_id)) {
                nlog_view($newsletter_id);
            }
            else {
                log_print("Newsletter has no log.");
            }
            break;

        case "send":
            // read list
            $list_id = read_line('Subscriber list?');
            if (!in_array($list_id, list_valid_ids())) {
                log_print("No such list!");
                break;
            }
            $list = list_get($list_id);
            log_print("\n".count($list)." subscribers in this list\n");

            // resume sending emails?
            $skip = read_line("Enter next recipient-index to send email to "
                              ."(0 means from the beginning):", 0);
            log_assert(is_numeric($skip) && (0 <= $skip)
                       && ($skip <= count($list)), "Invalid recipient index");
            $skip = (int)$skip;
            if (0 < $skip) {
                $left = count($list) - $skip;
                log_print("Skipping {$skip} recipients. There are {$left} "
                          ."left.");
                log_print("Last skipped recipient: "
                          .recipient_str($list[$skip - 1]));
                log_print("Next recipient is: ".recipient_str($list[$skip]));
            }

            echo "\n\n";

            // confirm
            if (!read_bool("This is the final warning! "
                           ."Should I start sending emails?", false)) {
                log_print("Aborted by user");
                break;
            }

            // start sending letters
            $i = $skip - 1;
            $count_ok = 0;
            $count_error = 0;
            foreach ($list as $recipient) {
                // skip some recipients
                if (0 < $skip) {
                    $skip--;
                    continue;
                }

                $i++;
                log_assert(valid_recipient($recipient));

                // log invalid email addresses
                if (!is_valid_email($recipient['email'])) {
                    nlog($newsletter_id,
                         $i."\tINVALID\t".recipient_str($recipient));
                    log_putch('i');
                    $count_error++;
                    continue;
                }

                // send email
                $subject = email_tags($textblock['title'], $recipient);
                $body = email_tags($textblock['text'], $recipient);
                $success = send_email($recipient['email'], $subject, $body,
                                      IA_NEWSLETTER_FROM, IA_NEWSLETTER_FROM,
                                      false);

                if ($success) {
                    log_putch('.');
                    nlog($newsletter_id,
                         $i."\tok\t".recipient_str($recipient));
                    $count_ok++;
                }
                else {
                    log_putch('e');
                    nlog($newsletter_id,
                         $i."\tERROR\t".recipient_str($recipient));
                    $count_error++;
                }

                // take a break from time to time
                if (0 == ($i + 1) % IA_BURST_LENGTH) {
                    usleep(IA_BURST_DELAY * 1000);
                }
            }

            log_putch("\n");
            log_print("\nTask completed!");
            log_print("{$count_ok} ok; {$count_error} errors; ".count($list)
                      ." total (total includes skipped)");
            break;

        default:
            log_print("Invalid command");
            echo <<<EOS

Valid commands:
quit
preview [<username>]
list <list-id>
count <list-id>
send
log
EOS;
            // valid subscriber lists
            echo "\nValid subscriber lists: ".join(', ', list_valid_ids())
                 ."\n\n\n";

    }
}

?>
